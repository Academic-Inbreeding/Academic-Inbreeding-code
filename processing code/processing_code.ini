rm(list = ls())
df<-read.csv('after_work1.18.csv')
df1<-subset(df,df$first_work_avg_publications_afterwork!=0)
 df1 <- df1 %>%mutate(group1 = case_when(
    gender == 1 & inbreeding1 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding1 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding1 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding1 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))


 df1 <- df1 %>%mutate(group2 = case_when(
    gender == 1 & inbreeding2 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding2 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding2 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding2 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))

df1 <- df1 %>%mutate(group3 = case_when(
    gender == 1 & inbreeding3 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding3 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding3 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding3 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))
df1 <- df1 %>%mutate(group4 = case_when(
    gender == 1 & inbreeding4 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding4 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding4 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding4 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))

lower_bound <- quantile(df1$first_work_avg_publications_afterwork, 0.01)
upper_bound <- quantile(df1$first_work_avg_publications_afterwork, 0.99)

# Perform 1% winsorization on the variable
df1$first_work_avg_publications_afterwork2 <- pmin(pmax(df1$first_work_avg_publications_afterwork, lower_bound), upper_bound)

# Calculate the 1% quantiles
lower_bound_jif <- quantile(df1$first_work_avg_jif_afterwork, 0.01)
upper_bound_jif <- quantile(df1$first_work_avg_jif_afterwork, 0.99)

# Perform 1% winsorization on the first_work_avg_jif_afterwork variable
df1$first_work_avg_jif_afterwork2 <- pmin(pmax(df1$first_work_avg_jif_afterwork, lower_bound_jif), upper_bound_jif)

result1 <- data.frame()

# Define group variables
group_vars <- c("group1", "group2", "group3", "group4")


for (group_var in group_vars) {
  # Group by the current variable and calculate mean, standard deviation, and standard error
  group_result <- df1 %>%
    group_by_at(group_var) %>%
    summarise(
      mean_publications = mean(first_work_avg_publications_afterwork2, na.rm = TRUE),
      sd_publications = sd(first_work_avg_publications_afterwork2, na.rm = TRUE),
      se_publications = sd_publications / sqrt(n()),  
      mean_jif = mean(first_work_avg_jif_afterwork2, na.rm = TRUE),
      sd_jif = sd(first_work_avg_jif_afterwork2, na.rm = TRUE),
      se_jif = sd_jif / sqrt(n()),  
      .groups = "drop"  # Drop grouping
    )
  
  # Add the group variable name
  group_result$group_var <- group_var
  
  # Append the current group result to result1
  result1 <- bind_rows(result1, group_result)
}
result2 <- data.frame()

# Define group variables
group_vars <- c("group1", "group2", "group3", "group4")


for (group_var in group_vars) {
  
  # Get all categories of the current group variable
  categories <- unique(df1[[group_var]])
  
  # Perform t-test for each pair of categories
  for (i in 1:(length(categories) - 1)) {
    for (j in (i + 1):length(categories)) {
      # Select subsets for two categories
      group1_data <- df1 %>% filter(!!sym(group_var) == categories[i])
      group2_data <- df1 %>% filter(!!sym(group_var) == categories[j])
      
      # Perform t-test on first_work_avg_publications_afterwork2
      t_test_result_publications <- t.test(group1_data$first_work_avg_publications_afterwork2, 
                                           group2_data$first_work_avg_publications_afterwork2)
      
      # Collect t-test results
      result2 <- bind_rows(result2, data.frame(
        group_var = group_var,
        category1 = categories[i],
        category2 = categories[j],
        variable = "first_work_avg_publications_afterwork2",
        t_value = t_test_result_publications$statistic,
        p_value = t_test_result_publications$p.value,
        mean_diff = mean(group1_data$first_work_avg_publications_afterwork2) - mean(group2_data$first_work_avg_publications_afterwork2),
        stringsAsFactors = FALSE
      ))
      
      # Perform t-test on first_work_avg_jif_afterwork2
      t_test_result_jif <- t.test(group1_data$first_work_avg_jif_afterwork2, 
                                  group2_data$first_work_avg_jif_afterwork2)
      
      # Collect t-test results
      result2 <- bind_rows(result2, data.frame(
        group_var = group_var,
        category1 = categories[i],
        category2 = categories[j],
        variable = "first_work_avg_jif_afterwork2", 
        t_value = t_test_result_jif$statistic,
        p_value = t_test_result_jif$p.value,
        mean_diff = mean(group1_data$first_work_avg_jif_afterwork2) - mean(group2_data$first_work_avg_jif_afterwork2),
        stringsAsFactors = FALSE
      ))
    }
  }
}


print(result2)



Difference analysis
df_country <- df1 %>%
  group_by(country_w, group4) %>%
  summarise(
    mean_first_work_avg_publications_afterwork = mean(first_work_avg_publications_afterwork, na.rm = TRUE),
    se_first_work_avg_publications_afterwork = sd(first_work_avg_publications_afterwork, na.rm = TRUE) / sqrt(n()),
    mean_first_work_avg_jif_afterwork = mean(first_work_avg_jif_afterwork, na.rm = TRUE),
    se_first_work_avg_jif_afterwork = sd(first_work_avg_jif_afterwork, na.rm = TRUE) / sqrt(n())
  )

df_country<-subset(df_country,df_country$group4!='Other')


df_subject <- df1 %>%
  group_by(w_subject2, group4) %>%
  summarise(
    mean_first_work_avg_publications_afterwork = mean(first_work_avg_publications_afterwork, na.rm = TRUE),
    se_first_work_avg_publications_afterwork = sd(first_work_avg_publications_afterwork, na.rm = TRUE) / sqrt(n()),
    mean_first_work_avg_jif_afterwork = mean(first_work_avg_jif_afterwork, na.rm = TRUE),
    se_first_work_avg_jif_afterwork = sd(first_work_avg_jif_afterwork, na.rm = TRUE) / sqrt(n())
  )
df_subject<-subset(df_subject,df_subject$group4!='Other')
subject_mapping <- data.frame(
  code = 1:11,
  subject = c("Humanities", "Law", "Social Sciences", "Natural Sciences", 
              "Mathematics and Computing", "Applied Sciences", "Medicine and Health", 
              "Engineering", "Journalism Media Communication", "Public Administration and Policy", 
              "Education")
)


df_subject <- df_subject %>%
  left_join(subject_mapping, by = c("w_subject2" = "code"))

df_rank <- df1 %>%
  group_by(ranking_category, group4) %>%
  summarise(
    mean_first_work_avg_publications_afterwork = mean(first_work_avg_publications_afterwork, na.rm = TRUE),
    se_first_work_avg_publications_afterwork = sd(first_work_avg_publications_afterwork, na.rm = TRUE) / sqrt(n()),
    mean_first_work_avg_jif_afterwork = mean(first_work_avg_jif_afterwork, na.rm = TRUE),
    se_first_work_avg_jif_afterwork = sd(first_work_avg_jif_afterwork, na.rm = TRUE) / sqrt(n())
  )
df_rank<-subset(df_rank,df_rank$group4!='Other')
df_rank <- df_rank %>%
  mutate(ranking_category = case_when(
    ranking_category == "0-500" ~ "0-500",
    ranking_category == "500-1000" ~ "501-1000",
    ranking_category == "1000-1500" ~ "1001-1500",
    ranking_category == "1500-2000" ~ "1501-2000",
    ranking_category == ">2000" ~ ">2000",
    TRUE ~ ranking_category 
  ))
df_rank <- df_rank %>%
  mutate(ranking_category = case_when(
    ranking_category == "0-500" ~ "0-500",
    ranking_category == "500-1000" ~ "501-1000",
    ranking_category == "1000-1500" ~ "1001-1500",
    ranking_category == "1500-2000" ~ "1501-2000",
    ranking_category == ">2000" ~ ">2000",
    TRUE ~ ranking_category 
  )) %>%
  mutate(ranking_category = factor(ranking_category, 
                                   levels = c("0-500", "501-1000", "1001-1500", "1501-2000", ">2000"))) %>%
  arrange(ranking_category)  
df_rank<-subset(df_rank,df_rank$ranking_category!='>2000')


# Initialize result data frame
result1 <- data.frame()
result2 <- data.frame()

# Define group variables
group_vars <- c("group1", "group2", "group3", "group4")


for (group_var in group_vars) {
  # Group by the current variable and calculate mean, standard deviation, and standard error
  group_result <- df2 %>%
    group_by_at(group_var) %>%
    summarise(
      mean_publications = mean(pub, na.rm = TRUE),
      sd_publications = sd(pub, na.rm = TRUE),
      se_publications = sd_publications / sqrt(n()),  
      mean_jif = mean(jif, na.rm = TRUE),
      sd_jif = sd(jif, na.rm = TRUE),
      se_jif = sd_jif / sqrt(n()),  
      .groups = "drop"  # Drop grouping
    )
  
  # Add the group variable name
  group_result$group_var <- group_var
  
  # Append the current group result to result1
  result1 <- bind_rows(result1, group_result)
}

for (group_var in group_vars) {
  
  # Get all categories of the current group variable
  categories <- unique(df2[[group_var]])
  
  # Perform t-test for each pair of categories
  for (i in 1:(length(categories) - 1)) {
    for (j in (i + 1):length(categories)) {
      # Select subsets for two categories
      group1_data <- df2 %>% filter(!!sym(group_var) == categories[i])
      group2_data <- df2 %>% filter(!!sym(group_var) == categories[j])
      
      # Perform t-test on pub
      t_test_result_publications <- t.test(group1_data$pub, 
                                           group2_data$pub)
      
      # Collect t-test results
      result2 <- bind_rows(result2, data.frame(
        group_var = group_var,
        category1 = categories[i],
        category2 = categories[j],
        variable = "pub", 
        t_value = t_test_result_publications$statistic,
        p_value = t_test_result_publications$p.value,
        mean_diff = mean(group1_data$pub) - mean(group2_data$pub),
        stringsAsFactors = FALSE
      ))
      
      # Perform t-test on jif
      t_test_result_jif <- t.test(group1_data$jif, 
                                  group2_data$jif)
      
      # Collect t-test results
      result2 <- bind_rows(result2, data.frame(
        group_var = group_var,
        category1 = categories[i],
        category2 = categories[j],
        variable = "jif", 
        t_value = t_test_result_jif$statistic,
        p_value = t_test_result_jif$p.value,
        mean_diff = mean(group1_data$jif) - mean(group2_data$jif),
        stringsAsFactors = FALSE
      ))
    }
  }
}
