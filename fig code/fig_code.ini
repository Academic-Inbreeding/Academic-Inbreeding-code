################################################################################## fig1
df1<-read.csv('fig1.csv')
df1 <- df1 %>%
  pivot_longer(cols = starts_with("inbreeding"), 
               names_to = "inbreeding_group", 
               values_to = "inbreeding_value")
fig1 <- ggplot(df1, aes(x = year, y = inbreeding_value, color = gender)) +
    geom_line(aes(group = interaction(gender, inbreeding_group)), size = 1.2) +
    geom_point(size = 3) +
    scale_color_manual(values = c("Female" = "#B22222", "Male" = "#4682B4")) +  # Set specific colors
    facet_wrap(~ inbreeding_group, scales = "free_y", ncol = 1) +  # Facet by inbreeding_group, with independent y-axis
    theme_test() +  # Use a simple theme
    theme(legend.title = element_blank(),  # Do not display the legend title
          legend.position = "bottom",  # Place the legend at the bottom
          legend.text = element_text(size = 16, family = "Times New Roman", face = "bold"), 
          legend.key.size = unit(2, "lines"),  
          strip.text = element_text(size = 12)) +  # Set facet label text size
    labs(x = "Year", y = "Mean Inbreeding Level") +
    theme(
        text = element_text(family = "Times New Roman"), 
        axis.text.x =  element_text(size = 14, face = "bold"), 
        axis.text.y = element_text(size = 14, face = "bold"), 
        axis.title.x = element_text(size = 14, face = "bold"), 
        axis.title.y = element_text(size = 14, face = "bold"),  
        plot.title = element_blank(), 
        plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
        plot.tag.position = c(0.05, 0.95), 
        strip.text = element_text(size = 14, face = "bold")
    ) +ylim(0, 0.4)

 ######################################################################################## fig2
df2<-read.csv('fig2.csv')
df2$Ranking_category <- factor(df2$Ranking_category, 
                               levels = c("0-500", "501-1000", "1001-1500", "1501-2000", ">2000"))
fig2<-ggplot(df2, aes(x = Ranking_category, y = Domain, fill = value)) +
  geom_tile() + 
  scale_fill_gradient(low = "white", high = "red") +  
  facet_grid(inbreeding_type ~ gender) +
  theme_minimal() + 
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "right",  
    plot.title = element_blank(),
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(size = 14),  
    legend.title = element_text(size = 14, face = "bold")  
  ) +
  labs(x = "Ranking Category", y = "Domain", fill = "Inbreeding Level")

########################fig2.1
df3.1<-read.csv('fig3.1.csv')
df3.2<-read.csv('fig3.2.csv')
median_values1 <- df3.1 %>%
  group_by(time1) %>%
  summarise(
    median_total_female_ratio = median(total_female_ratio, na.rm = TRUE),
    median_inbreeding1_female_ratio = median(inbreeding1_female_ratio, na.rm = TRUE),
    median_inbreeding2_female_ratio = median(inbreeding2_female_ratio, na.rm = TRUE),
    median_inbreeding3_female_ratio = median(inbreeding3_female_ratio, na.rm = TRUE),
    median_inbreeding4_female_ratio = median(inbreeding4_female_ratio, na.rm = TRUE)
  )

x_limits <- range(df3.1$total_female_ratio, na.rm = TRUE)
y_limits1 <- range(df3.1$inbreeding1_female_ratio, na.rm = TRUE)
y_limits2 <- range(df3.1$inbreeding2_female_ratio, na.rm = TRUE)
y_limits3 <- range(df3.1$inbreeding3_female_ratio, na.rm = TRUE)
y_limits4 <- range(df3.1$inbreeding4_female_ratio, na.rm = TRUE)


xlim_values <- c(floor(x_limits[1] * 10) / 10, ceiling(x_limits[2] * 10) / 10)
ylim1_values <- c(floor(y_limits1[1] * 10) / 10, ceiling(y_limits1[2] * 10) / 10)
ylim2_values <- c(floor(y_limits2[1] * 10) / 10, ceiling(y_limits2[2] * 10) / 10)
ylim3_values <- c(floor(y_limits3[1] * 10) / 10, ceiling(y_limits3[2] * 10) / 10)
ylim4_values <- c(floor(y_limits4[1] * 10) / 10, ceiling(y_limits4[2] * 10) / 10)

fig3.1<-ggplot(df3.1, aes(x = total_female_ratio, y = inbreeding4_female_ratio, color = country)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) +  

  geom_point(data = median_values1, aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points
  
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = median_total_female_ratio, yend = 0), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = 0, yend = median_inbreeding4_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = 0.6, yend = median_inbreeding4_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.6), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding4 Female Ratio",
    color='',
    tag='a'
  ) +
  ylim(0, 0.6) +  # Set y-axis range
  xlim(0, 0.6) +  # Set x-axis range
  coord_fixed(ratio = 1)+guides(color = guide_legend(nrow = 2))

median_values <- df3.2 %>%
  group_by(time1) %>%
  summarise(
    median_total_female_ratio = median(total_female_ratio, na.rm = TRUE),
    median_inbreeding1_female_ratio = median(inbreeding1_female_ratio, na.rm = TRUE),
    median_inbreeding2_female_ratio = median(inbreeding2_female_ratio, na.rm = TRUE),
    median_inbreeding3_female_ratio = median(inbreeding3_female_ratio, na.rm = TRUE),
    median_inbreeding4_female_ratio = median(inbreeding4_female_ratio, na.rm = TRUE)
  )

x_limits <- range(df3.2$total_female_ratio, na.rm = TRUE)
y_limits1 <- range(df3.2$inbreeding1_female_ratio, na.rm = TRUE)
y_limits2 <- range(df3.2$inbreeding2_female_ratio, na.rm = TRUE)
y_limits3 <- range(df3.2$inbreeding3_female_ratio, na.rm = TRUE)
y_limits4 <- range(df3.2$inbreeding4_female_ratio, na.rm = TRUE)


xlim_values <- c(floor(x_limits[1] * 10) / 10, ceiling(x_limits[2] * 10) / 10)
ylim1_values <- c(floor(y_limits1[1] * 10) / 10, ceiling(y_limits1[2] * 10) / 10)
ylim2_values <- c(floor(y_limits2[1] * 10) / 10, ceiling(y_limits2[2] * 10) / 10)
ylim3_values <- c(floor(y_limits3[1] * 10) / 10, ceiling(y_limits3[2] * 10) / 10)
ylim4_values <- c(floor(y_limits4[1] * 10) / 10, ceiling(y_limits4[2] * 10) / 10)
fig3<-grid.arrange(fig3.1,fig3.2,ncol=2)



fig3.1 <- ggplot(df3.1, aes(x = total_female_ratio, y = inbreeding1_female_ratio, color = country)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) + 
  geom_point(data = median_values1, aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = median_total_female_ratio, yend = 0), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = 0, yend = median_inbreeding1_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = 0.6, yend = median_inbreeding1_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.6), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding1 Female Ratio",
    color = '',
  ) +
  ylim(0, 0.6) +  # Set y-axis range
  xlim(0, 0.6) +  # Set x-axis range
  coord_fixed(ratio = 1) + 
  guides(color = guide_legend(nrow = 2))  # Set legend layout to two rows

median_values <- df3.2 %>%
  group_by(time1) %>%
  summarise(
    median_total_female_ratio = median(total_female_ratio, na.rm = TRUE),
    median_inbreeding1_female_ratio = median(inbreeding1_female_ratio, na.rm = TRUE),
    median_inbreeding2_female_ratio = median(inbreeding2_female_ratio, na.rm = TRUE),
    median_inbreeding3_female_ratio = median(inbreeding3_female_ratio, na.rm = TRUE),
    median_inbreeding4_female_ratio = median(inbreeding4_female_ratio, na.rm = TRUE)
  )

x_limits <- range(df3.2$total_female_ratio, na.rm = TRUE)
y_limits1 <- range(df3.2$inbreeding1_female_ratio, na.rm = TRUE)
y_limits2 <- range(df3.2$inbreeding2_female_ratio, na.rm = TRUE)
y_limits3 <- range(df3.2$inbreeding3_female_ratio, na.rm = TRUE)
y_limits4 <- range(df3.2$inbreeding4_female_ratio, na.rm = TRUE)


xlim_values <- c(floor(x_limits[1] * 10) / 10, ceiling(x_limits[2] * 10) / 10)
ylim1_values <- c(floor(y_limits1[1] * 10) / 10, ceiling(y_limits1[2] * 10) / 10)
ylim2_values <- c(floor(y_limits2[1] * 10) / 10, ceiling(y_limits2[2] * 10) / 10)
ylim3_values <- c(floor(y_limits3[1] * 10) / 10, ceiling(y_limits3[2] * 10) / 10)
ylim4_values <- c(floor(y_limits4[1] * 10) / 10, ceiling(y_limits4[2] * 10) / 10)
fig3.2<-ggplot(df3.2, aes(x = total_female_ratio, y = inbreeding4_female_ratio, color = subject2_code)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) + 
  geom_point(data = median_values, aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points
  
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.2), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = 0.2, yend = median_inbreeding4_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend =0.51, yend = median_inbreeding4_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.51), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding4 Female Ratio",
    color='',
    tag='b'
  ) +
  ylim(0.2, 0.51) +  # Set y-axis range
  xlim(0.2, 0.51) +  # Set x-axis range
  coord_fixed(ratio = 1)+scale_color_npg()
###############################################################################################################################fig4
df<-read.csv('data2.6.csv')
df <- df %>%
  mutate(ranking_category1 = case_when(
    is.na(w_ranking) ~ NA_character_,  
    w_ranking <= quantile(w_ranking, 0.25, na.rm = TRUE) ~ "Top 25%",
    w_ranking > quantile(w_ranking, 0.25, na.rm = TRUE) & w_ranking <= quantile(w_ranking, 0.5, na.rm = TRUE) ~ "25%-50%",
    w_ranking > quantile(w_ranking, 0.5, na.rm = TRUE) & w_ranking <= quantile(w_ranking, 0.75, na.rm = TRUE) ~ "50%-75%",
    w_ranking > quantile(w_ranking, 0.75, na.rm = TRUE) ~ "75%-100%"
  ))


df <- df %>%
  mutate(gender_inbreeding1 = case_when(
    gender == 1 & inbreeding1 == 1 ~ "Female Inbred",
    gender == 1 & inbreeding1 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding1 == 1 ~ "Male Inbred",
    gender == 0 & inbreeding1 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Unknown" 
  ))
  
  df <- df %>%
  mutate(gender_inbreeding2 = case_when(
    gender == 1 & inbreeding2 == 1 ~ "Female Inbred",
    gender == 1 & inbreeding2 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding2 == 1 ~ "Male Inbred",
    gender == 0 & inbreeding2 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Unknown"  
  ))



df <- df %>%
  mutate(gender_inbreeding3 = case_when(
    gender == 1 & inbreeding3 == 1 ~ "Female Inbred",
    gender == 1 & inbreeding3 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding3 == 1 ~ "Male Inbred",
    gender == 0 & inbreeding3 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Unknown" 
  ))
df <- df %>%
  mutate(gender_inbreeding4 = case_when(
    gender == 1 & inbreeding4 == 1 ~ "Female Inbred",
    gender == 1 & inbreeding4 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding4 == 1 ~ "Male Inbred",
    gender == 0 & inbreeding4 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Unknown"  
  ))

df<-subset(df,df$branking!='2001')
df<-subset(df,df$dranking!='2001')
winsorize <- function(x, lower_limit = 0.05, upper_limit = 0.95) {

  lower_bound <- quantile(x, lower_limit, na.rm = TRUE)
  upper_bound <- quantile(x, upper_limit, na.rm = TRUE)
  
  
  x[x < lower_bound] <- lower_bound
  x[x > upper_bound] <- upper_bound
  
  return(x)
}


df$branking <- winsorize(df$branking)
df$dranking <- winsorize(df$dranking)

library(dplyr)

df <- df %>%
  mutate(gender_inbreeding1 = recode(gender_inbreeding1,
                                    "Female_inbreeding1_0" = "Female Non-Inbred",
                                    "Female_inbreeding1_1" = "Female Inbred",
                                    "Male_inbreeding1_0" = "Male Non-Inbred",
                                    "Male_inbreeding1_1" = "Male Inbred"))
df <- df %>%
  mutate(gender_inbreeding2 = recode(gender_inbreeding2,
                                    "Female_inbreeding2_0" = "Female Non-Inbred",
                                    "Female_inbreeding2_1" = "Female Inbred",
                                    "Male_inbreeding2_0" = "Male Non-Inbred",
                                    "Male_inbreeding2_1" = "Male Inbred"))
df <- df %>%
  mutate(gender_inbreeding3 = recode(gender_inbreeding3,
                                    "Female_inbreeding3_0" = "Female Non-Inbred",
                                    "Female_inbreeding3_1" = "Female Inbred",
                                    "Male_inbreeding3_0" = "Male Non-Inbred",
                                    "Male_inbreeding3_1" = "Male Inbred"))
df <- df %>%
  mutate(gender_inbreeding4 = recode(gender_inbreeding4,
                                    "Female_inbreeding4_0" = "Female Non-Inbred",
                                    "Female_inbreeding4_1" = "Female Inbred",
                                    "Male_inbreeding4_0" = "Male Non-Inbred",
                                    "Male_inbreeding4_1" = "Male Inbred"))
color_scheme <- c(
  "Female Inbred" = "#B22222",
  "Female Non-Inbred" = "lightcoral",
  "Male Inbred" = "#4682B4",
  "Male Non-Inbred" = "lightblue"
)
df$gender_inbreeding1 <- factor(df$gender_inbreeding1, levels = c("Female Non-Inbred", "Female Inbred", "Male Non-Inbred", "Male Inbred"))
df$gender_inbreeding2 <- factor(df$gender_inbreeding2, levels = c("Female Non-Inbred", "Female Inbred", "Male Non-Inbred", "Male Inbred"))
df$gender_inbreeding3 <- factor(df$gender_inbreeding3, levels = c("Female Non-Inbred", "Female Inbred", "Male Non-Inbred", "Male Inbred"))
df$gender_inbreeding4 <- factor(df$gender_inbreeding4, levels = c("Female Non-Inbred", "Female Inbred", "Male Non-Inbred", "Male Inbred"))
df$ranking_category1 <- factor(df$ranking_category1, levels = c("Top 25%", "25%-50%", "50%-75%", "75%-100%"))
fig4.1<-ggplot(df, aes(x = gender_inbreeding1, y = branking, color = gender_inbreeding1)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Branking", color = "", tag = "a") +  
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  


fig4.2<-ggplot(df, aes(x = gender_inbreeding2, y = branking, color = gender_inbreeding2)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Branking", color = "", tag = "b") +  
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  

fig4.3<-ggplot(df, aes(x = gender_inbreeding3, y = branking, color = gender_inbreeding3)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Branking", color = "", tag = "c") +  # tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  

fig4.4<-ggplot(df, aes(x = gender_inbreeding4, y = branking, color = gender_inbreeding4)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Branking", color = "", tag = "d") +  # tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  

fig4.5<-ggplot(df, aes(x = gender_inbreeding1, y = dranking, color = gender_inbreeding1)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Dranking", color = "", tag = "e") +  # tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  # 
fig4.6<-ggplot(df, aes(x = gender_inbreeding2, y = dranking, color = gender_inbreeding2)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Dranking", color = "", tag = "f") +  #tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  # 

fig4.7<-ggplot(df, aes(x = gender_inbreeding3, y = dranking, color = gender_inbreeding3)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Dranking", color = "", tag = "g") +  # tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  # 
fig4.8<-ggplot(df, aes(x = gender_inbreeding4, y = dranking, color = gender_inbreeding4)) +
  geom_jitter(alpha = 0.5, size = 0.1, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Dranking", color = "", tag = "h") +  # tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"),  # Set global font to Times New Roman
    axis.text.x = element_blank(),  # Remove x-axis labels
    axis.text.y = element_text(size = 10, face = "bold"),  # Set font for y-axis labels
    axis.title.x = element_blank(),  # Remove x-axis title
    axis.title.y = element_text(size = 14, face = "bold"),  # Set font for y-axis title
    plot.title = element_blank(),  # Remove plot title
    legend.position = "none",  # Place the legend at the bottom
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"),  # Enlarge legend text
    legend.key.size = unit(1.5, "lines"),  # Enlarge legend key size
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),  # Set tag font
    strip.text = element_text(size = 14, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(size = 4)))  

fig4<-grid.arrange(fig4.1, fig4.2, fig4.3, fig4.4, fig4.5, fig4.6, fig4.7, fig4.8,ncol=2)

#################################################################################################################################
#################################################################################################################################figs13
df<-read.csv('after_work1.18.csv')
df2<-subset(df,df$pub!=0)
df2 <- df2 %>% mutate(group1 = case_when(
    gender == 1 & inbreeding1 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding1 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding1 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding1 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))

df2 <- df2 %>% mutate(group2 = case_when(
    gender == 1 & inbreeding2 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding2 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding2 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding2 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))

df2 <- df2 %>% mutate(group3 = case_when(
    gender == 1 & inbreeding3 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding3 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding3 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding3 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))

df2 <- df2 %>% mutate(group4 = case_when(
    gender == 1 & inbreeding4 == 1 ~ "Female Inbred",
    gender == 0 & inbreeding4 == 1 ~ "Male Inbred",
    gender == 1 & inbreeding4 == 0 ~ "Female Non-Inbred",
    gender == 0 & inbreeding4 == 0 ~ "Male Non-Inbred",
    TRUE ~ "Other"
  ))
lower_bound <- quantile(df2$pub, 0.01)
upper_bound <- quantile(df2$pub, 0.99)


df2$pub <- pmin(pmax(df2$pub, lower_bound), upper_bound)

#  first_work_avg_jif_afterwork 
lower_bound_jif <- quantile(df2$jif, 0.01)
upper_bound_jif <- quantile(df2$jif, 0.99)

#  first_work_avg_jif_afterwork 
df2$jif <- pmin(pmax(df2$jif, lower_bound_jif), upper_bound_jif)

#######################################################################################figs15


##################################################################################################################
dfs1<-read.csv('figs1.csv')
dfs2<-read.csv('figs2.csv')
dfs1 <- dfs1 %>%
  pivot_longer(cols = starts_with("inbreeding"), 
               names_to = "inbreeding_group", 
               values_to = "inbreeding_value")
dfs2 <- dfs2 %>%
  pivot_longer(cols = starts_with("inbreeding"), 
               names_to = "inbreeding_group", 
               values_to = "inbreeding_value")

figs1<-ggplot(dfs1, aes(x = year, y = inbreeding_value, color = gender)) +
    geom_line(aes(group = interaction(gender, inbreeding_group)), size = 1.2) +
    geom_point(size = 3) +
    scale_color_manual(values = c("Female" = "#B22222", "Male" = "#4682B4")) +  # Set specific colors
    facet_wrap(~ inbreeding_group, scales = "free_y", ncol = 1) +  # Facet by inbreeding_group, with independent y-axis
    theme_test() +  # Use a simple theme
    theme(legend.title = element_blank(),  # Do not display the legend title
          legend.position = "bottom",  # Place the legend at the bottom
          strip.text = element_text(size = 12)) +  # Set facet label text size
    labs(x = "Year", y = "Mean Inbreeding Level")+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_text(size = 14, face = "bold"), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_text(size = 14, face = "bold"), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Arial Black", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold")
  )+ylim(0,0.4)



###################################################################################3




##################################################################################################
dfs1<-read.csv('figs1.csv')

dfs1 <- dfs1 %>%
  pivot_longer(cols = starts_with("inbreeding"), 
               names_to = "inbreeding_group", 
               values_to = "inbreeding_value")


dfs1 <- dfs1 %>%
  group_by(inbreeding_group, gender) %>%
  mutate(
    lower_quantile = quantile(inbreeding_value, 0.05),  # 5%
    upper_quantile = quantile(inbreeding_value, 0.95)   # 95%
  ) %>%
  mutate(
    inbreeding_value = ifelse(inbreeding_value < lower_quantile, lower_quantile, 
                              ifelse(inbreeding_value > upper_quantile, upper_quantile, inbreeding_value))
  ) %>%
  select(-lower_quantile, -upper_quantile)
dfs1 <- dfs1 %>%
  group_by(inbreeding_group, gender) %>%
  mutate(
    lower_quantile = quantile(inbreeding_value, 0.05),  # 5%
    upper_quantile = quantile(inbreeding_value, 0.95)   # 95%
  ) %>%
  mutate(
    inbreeding_value = ifelse(inbreeding_value < lower_quantile, lower_quantile, 
                              ifelse(inbreeding_value > upper_quantile, upper_quantile, inbreeding_value))
  ) %>%
  select(-lower_quantile, -upper_quantile)
figs1<-ggplot(dfs1, aes(x = w_ranking, y = inbreeding_value, color = gender)) +
    geom_line(aes(group = interaction(gender, inbreeding_group)), size = 0.8) +
    geom_point(size = 0.5) +
    scale_color_manual(values = c("Female" = "#B22222", "Male" = "#4682B4")) +  # Set specific colors
    facet_wrap(~ inbreeding_group, scales = "free_y", ncol = 1) +  # Facet by inbreeding_group, with independent y-axis
    theme_test() +  # Use a simple theme
    theme(legend.title = element_blank(),  # Do not display the legend title
          legend.position = "bottom",  # Place the legend at the bottom
          legend.text = element_text(size = 16, family = "Times New Roman", face = "bold"),
          strip.text = element_text(size = 12)) +  # Set facet label text size
    labs(x = "World Ranking", y = "Mean Inbreeding Level")+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_text(size = 14, face = "bold"), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_text(size = 14, face = "bold"), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Arial Black", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold")
  )+ylim(0,0.69)
  ggsave("figs1.png",figs1,dpi = 600, width = 10, height = 9,device = "png")
############################################################################################################

dfs2<-read.csv('figs2.csv')
figs2<-ggplot(dfs2, aes(x = year, y = value*100, color = variable, linetype = gender)) +
  geom_line(size=1) + # 
  facet_wrap(~ country_w,ncol=5) + # 
  theme_test() +
  scale_x_continuous(breaks = seq(min(dfs2$year), max(dfs2$year), by = 20))+ # 
  scale_linetype_manual(values = c("solid", "dashed")) +theme_test() +  # Use a simple theme
    theme(legend.title = element_blank(),  # Do not display the legend title
          legend.position = "bottom",  # Place the legend at the bottom
          legend.text = element_text(size = 16, family = "Times New Roman", face = "bold"),
          strip.text = element_text(size = 12)) +  # Set facet label text size
    labs(x = "Year", y = "Mean Inbreeding Level(%)")+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_text(size = 14, face = "bold"), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_text(size = 14, face = "bold"), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    legend.key.size = unit(1.5, "lines"),
    strip.text = element_text(size = 14, face = "bold")
  )+scale_color_jco()
ggsave("figs2.png",figs2,dpi = 600, width = 10, height = 8,device = "png")

dfs3<-read.csv('figs3.csv')
figs3<-ggplot(dfs3, aes(x = year, y = value*100, color = variable, linetype = gender)) +
  geom_line(size=1) + 
  facet_wrap(~ domain,ncol=4) + 
  theme_test() +
  scale_x_continuous(breaks = seq(min(dfs2$year), max(dfs2$year), by = 20))+ #
  scale_linetype_manual(values = c("solid", "dashed")) +theme_test() +  # Use a simple theme
    theme(legend.title = element_blank(),  # Do not display the legend title
          legend.position = "bottom",  # Place the legend at the bottom
          legend.text = element_text(size = 16, family = "Times New Roman", face = "bold"),
          strip.text = element_text(size = 12)) +  # Set facet label text size
    labs(x = "Year", y = "Mean Inbreeding Level(%)")+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_text(size = 14, face = "bold"), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_text(size = 14, face = "bold"), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    legend.key.size = unit(1.5, "lines"),
    strip.text = element_text(size = 14, face = "bold")
  )+scale_color_jco()
ggsave("figs3.png",figs2,dpi = 600, width = 10, height = 8,device = "png")
###########################################################################################################figs4-s9
df3.1<-read.csv('fig3.1.csv')
df3.2<-read.csv('fig3.2.csv')
median_values1 <- df3.1 %>%
  group_by(time1) %>%
  summarise(
    median_total_female_ratio = median(total_female_ratio, na.rm = TRUE),
    median_inbreeding1_female_ratio = median(inbreeding1_female_ratio, na.rm = TRUE),
    median_inbreeding2_female_ratio = median(inbreeding2_female_ratio, na.rm = TRUE),
    median_inbreeding3_female_ratio = median(inbreeding3_female_ratio, na.rm = TRUE),
    median_inbreeding4_female_ratio = median(inbreeding4_female_ratio, na.rm = TRUE)
  )

x_limits <- range(df3.1$total_female_ratio, na.rm = TRUE)
y_limits1 <- range(df3.1$inbreeding1_female_ratio, na.rm = TRUE)
y_limits2 <- range(df3.1$inbreeding2_female_ratio, na.rm = TRUE)
y_limits3 <- range(df3.1$inbreeding3_female_ratio, na.rm = TRUE)
y_limits4 <- range(df3.1$inbreeding4_female_ratio, na.rm = TRUE)


xlim_values <- c(floor(x_limits[1] * 10) / 10, ceiling(x_limits[2] * 10) / 10)
ylim1_values <- c(floor(y_limits1[1] * 10) / 10, ceiling(y_limits1[2] * 10) / 10)
ylim2_values <- c(floor(y_limits2[1] * 10) / 10, ceiling(y_limits2[2] * 10) / 10)
ylim3_values <- c(floor(y_limits3[1] * 10) / 10, ceiling(y_limits3[2] * 10) / 10)
ylim4_values <- c(floor(y_limits4[1] * 10) / 10, ceiling(y_limits4[2] * 10) / 10)



median_values <- df3.2 %>%
  group_by(time1) %>%
  summarise(
    median_total_female_ratio = median(total_female_ratio, na.rm = TRUE),
    median_inbreeding1_female_ratio = median(inbreeding1_female_ratio, na.rm = TRUE),
    median_inbreeding2_female_ratio = median(inbreeding2_female_ratio, na.rm = TRUE),
    median_inbreeding3_female_ratio = median(inbreeding3_female_ratio, na.rm = TRUE),
    median_inbreeding4_female_ratio = median(inbreeding4_female_ratio, na.rm = TRUE)
  )

x_limits <- range(df3.2$total_female_ratio, na.rm = TRUE)
y_limits1 <- range(df3.2$inbreeding1_female_ratio, na.rm = TRUE)
y_limits2 <- range(df3.2$inbreeding2_female_ratio, na.rm = TRUE)
y_limits3 <- range(df3.2$inbreeding3_female_ratio, na.rm = TRUE)
y_limits4 <- range(df3.2$inbreeding4_female_ratio, na.rm = TRUE)


xlim_values <- c(floor(x_limits[1] * 10) / 10, ceiling(x_limits[2] * 10) / 10)
ylim1_values <- c(floor(y_limits1[1] * 10) / 10, ceiling(y_limits1[2] * 10) / 10)
ylim2_values <- c(floor(y_limits2[1] * 10) / 10, ceiling(y_limits2[2] * 10) / 10)
ylim3_values <- c(floor(y_limits3[1] * 10) / 10, ceiling(y_limits3[2] * 10) / 10)
ylim4_values <- c(floor(y_limits4[1] * 10) / 10, ceiling(y_limits4[2] * 10) / 10)
fig3<-grid.arrange(fig3.1,fig3.2,ncol=2)



figs4 <- ggplot(df3.1, aes(x = total_female_ratio, y = inbreeding1_female_ratio, color = country)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) +  

  geom_point(data = median_values1, aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points
  
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = median_total_female_ratio, yend = 0), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = 0, yend = median_inbreeding1_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = 0.6, yend = median_inbreeding1_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.6), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding1 Female Ratio",
    color = '',
  ) +
  ylim(0, 0.6) +  # Set y-axis range
  xlim(0, 0.6) +  # Set x-axis range
  coord_fixed(ratio = 1) + 
  guides(color = guide_legend(nrow = 2))  # Set legend layout to two rows

figs5 <- ggplot(df3.1, aes(x = total_female_ratio, y = inbreeding2_female_ratio, color = country)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) +  

  geom_point(data = median_values1, aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points

  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = median_total_female_ratio, yend = 0), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = 0, yend = median_inbreeding2_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = 0.6, yend = median_inbreeding2_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.6), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding2 Female Ratio",
    color = '',
  ) +
  ylim(0, 0.6) +  # Set y-axis range
  xlim(0, 0.6) +  # Set x-axis range
  coord_fixed(ratio = 1) + 
  guides(color = guide_legend(nrow = 2))  # Set legend layout to two rows

figs6 <- ggplot(df3.1, aes(x = total_female_ratio, y = inbreeding3_female_ratio, color = country)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) +  
  
  geom_point(data = median_values1, aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points

  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = median_total_female_ratio, yend = 0), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = 0, yend = median_inbreeding3_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = 0.6, yend = median_inbreeding3_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values1, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.6), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding3 Female Ratio",
    color = '',
  ) +
  ylim(0, 0.6) +  # Set y-axis range
  xlim(0, 0.6) +  # Set x-axis range
  coord_fixed(ratio = 1) + 
  guides(color = guide_legend(nrow = 2))  # Set legend layout to two rows


median_values <- df3.2 %>%
  group_by(time1) %>%
  summarise(
    median_total_female_ratio = median(total_female_ratio, na.rm = TRUE),
    median_inbreeding1_female_ratio = median(inbreeding1_female_ratio, na.rm = TRUE),
    median_inbreeding2_female_ratio = median(inbreeding2_female_ratio, na.rm = TRUE),
    median_inbreeding3_female_ratio = median(inbreeding3_female_ratio, na.rm = TRUE),
    median_inbreeding4_female_ratio = median(inbreeding4_female_ratio, na.rm = TRUE)
  )

x_limits <- range(df3.2$total_female_ratio, na.rm = TRUE)
y_limits1 <- range(df3.2$inbreeding1_female_ratio, na.rm = TRUE)
y_limits2 <- range(df3.2$inbreeding2_female_ratio, na.rm = TRUE)
y_limits3 <- range(df3.2$inbreeding3_female_ratio, na.rm = TRUE)
y_limits4 <- range(df3.2$inbreeding4_female_ratio, na.rm = TRUE)


xlim_values <- c(floor(x_limits[1] * 10) / 10, ceiling(x_limits[2] * 10) / 10)
ylim1_values <- c(floor(y_limits1[1] * 10) / 10, ceiling(y_limits1[2] * 10) / 10)
ylim2_values <- c(floor(y_limits2[1] * 10) / 10, ceiling(y_limits2[2] * 10) / 10)
ylim3_values <- c(floor(y_limits3[1] * 10) / 10, ceiling(y_limits3[2] * 10) / 10)
ylim4_values <- c(floor(y_limits4[1] * 10) / 10, ceiling(y_limits4[2] * 10) / 10)
figs7<-ggplot(df3.2, aes(x = total_female_ratio, y = inbreeding4_female_ratio, color = subject2_code)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) + 

  geom_point(data = median_values, aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points

  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.2), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = 0.2, yend = median_inbreeding4_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend =0.51, yend = median_inbreeding4_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding4_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.51), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding4 Female Ratio",
    color='',
    tag='b'
  ) +
  ylim(0.2, 0.51) +  # Set y-axis range
  xlim(0.2, 0.51) +  # Set x-axis range
  coord_fixed(ratio = 1)+scale_color_npg()


# 1
figs7 <- ggplot(df3.2, aes(x = total_female_ratio, y = inbreeding1_female_ratio, color = subject2_code)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) + 

  geom_point(data = median_values, aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points

  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.2), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = 0.2, yend = median_inbreeding1_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = 0.51, yend = median_inbreeding1_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding1_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.51), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding1 Female Ratio",
    color='',
  ) +
  ylim(0.2, 0.51) +  # Set y-axis range
  xlim(0.2, 0.51) +  # Set x-axis range
  coord_fixed(ratio = 1) + scale_color_npg()

# 2
figs8 <- ggplot(df3.2, aes(x = total_female_ratio, y = inbreeding2_female_ratio, color = subject2_code)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) + 

  geom_point(data = median_values, aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points

  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.2), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = 0.2, yend = median_inbreeding2_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = 0.51, yend = median_inbreeding2_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding2_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.51), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding2 Female Ratio",
    color='',
  ) +
  ylim(0.2, 0.51) +  # Set y-axis range
  xlim(0.2, 0.51) +  # Set x-axis range
  coord_fixed(ratio = 1) + scale_color_npg()

# 3
figs9 <- ggplot(df3.2, aes(x = total_female_ratio, y = inbreeding3_female_ratio, color = subject2_code)) +
  geom_point(size = 4) +  # Increase the size of the points
  geom_smooth(method = "lm", se = TRUE, color = "blue") +  # Add a fitted curve and confidence interval
  facet_wrap(~ time1) + 

  geom_point(data = median_values, aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio), 
             color = "darkred", size = 5, shape = 16) +  # Increase the size of the median points

  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.2), 
               color = "darkred", linetype = "dashed") +  # Downward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = 0.2, yend = median_inbreeding3_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Leftward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = 0.51, yend = median_inbreeding3_female_ratio), 
               color = "darkred", linetype = "dashed") +  # Rightward dashed line
  geom_segment(data = median_values, 
               aes(x = median_total_female_ratio, y = median_inbreeding3_female_ratio, 
                   xend = median_total_female_ratio, yend = 0.51), 
               color = "darkred", linetype = "dashed") +  # Upward dashed line
  geom_abline(intercept = 0, slope = 1, color = "black", linetype = "solid", size = 1) +  # Add 45-degree line
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(size = 14, face = "bold"),
    axis.text.y = element_text(size = 14, face = "bold"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    legend.position = "top", 
    strip.text = element_text(size = 14, face = "bold"),
    plot.title = element_blank(),
    plot.tag = element_text(size = 18, face = "bold", family = "Times New Roman")
  ) +
  labs(
    x = "Total Female Ratio",
    y = "Inbreeding3 Female Ratio",
    color='',
  ) +
  ylim(0.2, 0.51) +  # Set y-axis range
  xlim(0.2, 0.51) +  # Set x-axis range
  coord_fixed(ratio = 1) + scale_color_npg() 
###############################################################################################################figs10-12
 figs10
df<- df %>%
  filter(country_w %in% countries)
figs10.1<-ggplot(df, aes(x = gender_inbreeding4, y = branking, color = gender_inbreeding4)) +
  geom_jitter(alpha = 0.5, size = 0.5, width = 0.4, height = 0) + 
  theme_test() +
  labs(x = "", y = "Branking", color = "Gender Inbreeding 4", tag = 'a') +  # tag
  scale_color_manual(values = color_scheme) +
  facet_wrap(~ ranking_category1, ncol = 1) +
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(),  
    axis.title.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    legend.position = "none",
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),   
    strip.text = element_text(size = 14, face = "bold")
  ) +
  facet_wrap(~ country_w, ncol = 3)
figs10.2<-ggplot(df, aes(x = gender_inbreeding4, y = dranking, color = gender_inbreeding4)) +
     geom_jitter(alpha = 0.5, size = 0.5, width = 0.4, height = 0) + 
     theme_test() +
     labs(x = "", y = "Dranking", color = "Gender Inbreeding 4",tag='b') +  # tag
     scale_color_manual(values = color_scheme) +
     facet_wrap(~ ranking_category1,ncol=1)+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    legend.position = "none",
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),   
    strip.text = element_text(size = 14, face = "bold"))+facet_wrap(~country_w,ncol=3)
figs10<-grid.arrange(figs10.1,figs10.2,ncol=2)
ggsave("figs10.png",figs10,dpi = 600, width = 10, height = 12,device = "png")
df <- df %>%
  mutate(domain = case_when(
    w_subject2 == 1 ~ "Humanities",
    w_subject2 == 2 ~ "Law",
    w_subject2 == 3 ~ "Social Sciences",
    w_subject2 == 4 ~ "Natural Sciences",
    w_subject2 == 5 ~ "Math and Computing",
    w_subject2 == 6 ~ "Applied Sciences",
    w_subject2 == 7 ~ "Medicine and Health",
    w_subject2 == 8 ~ "Engineering",
    w_subject2 == 9 ~ "Journalism Media Communication",
    w_subject2 == 10 ~ "Public Administration and Policy",
    w_subject2 == 11 ~ "Education",
    TRUE ~ "Unknown"
figs11.1<-ggplot(df, aes(x = gender_inbreeding4, y = branking, color = gender_inbreeding4)) +
     geom_jitter(alpha = 0.5, size = 0.5, width = 0.4, height = 0) + 
     theme_test() +
     labs(x = "", y = "Branking", color = "Gender Inbreeding 4",tag='a') +  # tag
     scale_color_manual(values = color_scheme) +
     facet_wrap(~ ranking_category1,ncol=1)+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x =element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    legend.position = "none",
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),   
    strip.text = element_text(size = 14, face = "bold"))+facet_wrap(~domain,ncol=2)

figs11.2<-ggplot(df, aes(x = gender_inbreeding4, y = dranking, color = gender_inbreeding4)) +
     geom_jitter(alpha = 0.5, size = 0.5, width = 0.4, height = 0) + 
     theme_test() +
     labs(x = "", y = "Dranking", color = "Gender Inbreeding 4",tag='b') +  #tag
     scale_color_manual(values = color_scheme) +
     facet_wrap(~ ranking_category1,ncol=1)+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    legend.position = "none",
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),   
    strip.text = element_text(size = 14, face = "bold"))+facet_wrap(~domain,ncol=2)
figs11<-grid.arrange(figs11.1,figs11.2,ncol=2)
ggsave("figs11.png",figs11,dpi = 600, width = 16, height = 12,device = "png")


df <- df %>%
  mutate(time1 = case_when(
    year >= 1975 & year <= 1986 ~ "1975-1986",
    year >= 1987 & year <= 1998 ~ "1987-1998",
    year >= 1999 & year <= 2010 ~ "1999-2010",
    year >= 2011 & year <= 2022 ~ "2011-2022",
    TRUE ~ "Out of range"  
  ))
figs12.1<-ggplot(df, aes(x = gender_inbreeding4, y = branking, color = gender_inbreeding4)) +
     geom_jitter(alpha = 0.5, size = 0.5, width = 0.4, height = 0) + 
     theme_test() +
     labs(x = "", y = "Branking", color = "Gender Inbreeding 4",tag='a') +  # tag
     scale_color_manual(values = color_scheme) +
     facet_wrap(~ ranking_category1,ncol=1)+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    legend.position = "none",
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),   
    strip.text = element_text(size = 14, face = "bold"))+facet_wrap(~time1,ncol=2)


figs12.2<-ggplot(df, aes(x = gender_inbreeding4, y = dranking, color = gender_inbreeding4)) +
     geom_jitter(alpha = 0.5, size = 0.5, width = 0.4, height = 0) + 
     theme_test() +
     labs(x = "", y = "Dranking", color = "Gender Inbreeding 4",tag='b') +  # tag
     scale_color_manual(values = color_scheme) +
     facet_wrap(~ ranking_category1,ncol=1)+theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x =  element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"),  
    plot.title = element_blank(), 
    legend.position = "none",
    plot.tag = element_text(size = 16, family = "Times New Roman", face = "bold"),   
    strip.text = element_text(size = 14, face = "bold"))+facet_wrap(~time1,ncol=2)
figs12<-grid.arrange(figs12.1,figs12.2,ncol=2)
ggsave("figs12.png",figs12,dpi = 600, width = 16, height = 12,device = "png")
################################################################################################################figs13
df13<-read.csv('figs13.csv')
df13$Type <- factor(df13$Type, levels = c("Female Non-Inbred", "Female Inbred", "Male Non-Inbred", "Male Inbred"))
color_scheme <- c(
  "Female Inbred" = "#B22222",
  "Female Non-Inbred" = "lightcoral",
  "Male Inbred" = "#4682B4",
  "Male Non-Inbred" = "lightblue"
)
library(ggplot2)
library(gridExtra)
library(ggpubr)


figs13.1 <- ggplot(subset(df13, group == "Inbred1"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "a",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 0.95)) +  scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs13.2 <- ggplot(subset(df13, group == "Inbred2"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_test(values = color_scheme) + 
  labs(y = "Average Pub", tag = "b",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"), 
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 0.95)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs13.3 <- ggplot(subset(df13, group == "Inbred3"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "c",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"), 
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 0.95)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs13.4 <- ggplot(subset(df13, group == "Inbred4"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "d",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 0.95)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")


figs13.5 <- ggplot(subset(df13, group == "Inbred1"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "e",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 3.5)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")

figs13.6 <- ggplot(subset(df13, group == "Inbred2"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "f",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 3.5)) + scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+ 
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")

figs13.7 <- ggplot(subset(df13, group == "Inbred3"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "g",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"), 
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
 coord_cartesian(ylim = c(0, 3.5)) + scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+ 
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")

figs13.8 <- ggplot(subset(df13, group == "Inbred4"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "h",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 3.5)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")


figs13 <- grid.arrange(figs13.1, figs13.2, figs13.3, figs13.4, figs13.5, figs13.6, figs13.7, figs13.8, ncol = 2)
ggsave("figs13.png",figs13,dpi = 600, width = 10, height = 8,device = "png")
################################################################################################################
library(dplyr)
df<-subset(df,df$syear>=1975)

df14 <- df %>%
  
  mutate(period = floor((syear - 1975) / 10) * 10 + 1975) %>%
 
  group_by(period, gender_inbreeding4) %>%
  
  summarise(
    mean_branking = mean(branking, na.rm = TRUE),
    mean_dranking = mean(dranking, na.rm = TRUE),
    .groups = 'drop' 
  )
df14_wide <- df14 %>%
  pivot_wider(
    names_from = gender_inbreeding4, 
    values_from = c(mean_branking, mean_dranking)
  )
df14_diff <- df14_wide %>%
  mutate(
    Female_branking_gap = `mean_branking_Female Inbred` - `mean_branking_Female Non-Inbred`,
    Female_dranking_gap = `mean_dranking_Female Inbred` - `mean_dranking_Female Non-Inbred`,
    Male_branking_gap = `mean_branking_Male Inbred` - `mean_branking_Male Non-Inbred`,
    Male_dranking_gap = `mean_dranking_Male Inbred` - `mean_dranking_Male Non-Inbred`
  )
df14_diff_long <- df14_diff %>%
  pivot_longer(
    cols = starts_with("Female") | starts_with("Male"),  
    names_to = "Variable", 
    values_to = "Value"     
  )
figs14 <- ggplot(df14_diff_long, aes(x = period, y = Value, color = Variable)) +
  geom_line(size = 1) +  
  geom_point(size = 3) +  
  scale_color_npg() +  
  labs(
    x = "Year", 
    y = "Ranking Gaps", 
    color = "", 
  ) +
  theme_test() +  # Use a simple theme
  theme(
    text = element_text(family = "Times New Roman", size = 14, face = "bold"), 
    axis.text.x = element_text(size = 14, face = "bold"),  
    axis.text.y = element_text(size = 14, face = "bold"),  
    axis.title.x = element_text(size = 16, face = "bold"),  
    axis.title.y = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14, family = "Times New Roman", face = "bold"), 
    legend.title = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    legend.key.size = unit(2, "lines"),  
    plot.title = element_text(size = 14, face = "bold"), 
    plot.tag = element_text(size = 14, face = "bold", family = "Times New Roman"),  
    strip.text = element_text(size = 14, face = "bold") 
  )
ggsave("figs14.png",figs14,dpi = 600, width = 10, height = 8,device = "png")

dfs15<-read.csv('figs15.csv')
dfs15$Type <- factor(dfs15$Type, levels = c("Female Non-Inbred", "Female Inbred", "Male Non-Inbred", "Male Inbred"))
color_scheme <- c(
  "Female Inbred" = "#B22222",
  "Female Non-Inbred" = "lightcoral",
  "Male Inbred" = "#4682B4",
  "Male Non-Inbred" = "lightblue"
)

figs15.1 <- ggplot(subset(dfs15, group == "Inbred1"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "a",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 2.8)) +  scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs15.2 <- ggplot(subset(dfs15, group == "Inbred2"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "b",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 2.8)) +  scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs15.3 <- ggplot(subset(dfs15, group == "Inbred3"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "c",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 2.8)) +  scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs15.4 <- ggplot(subset(dfs15, group == "Inbred2"), aes(x = Type, y = mean_pub, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_pub - se_pub, ymax = mean_pub + se_pub), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub", tag = "d",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 2.8)) +  scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+
  geom_text(aes(label = round(mean_pub, 2)), vjust = -1.5, size = 4, fontface = "bold")

figs15.5 <- ggplot(subset(dfs15, group == "Inbred1"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "e",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 11)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")

figs15.6 <- ggplot(subset(dfs15, group == "Inbred2"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "f",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 11)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")

figs15.7 <- ggplot(subset(dfs15, group == "Inbred3"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "g",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"), 
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 11)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")

figs15.8 <- ggplot(subset(dfs15, group == "Inbred4"), aes(x = Type, y = mean_jif, fill = Type)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_jif - se_jif, ymax = mean_jif + se_jif), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF", tag = "h",fill='') + 
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman"), 
    axis.text.x = element_blank(), 
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none",  
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 11)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_jif, 2) ),vjust = -1.5 ,size = 4, fontface = "bold")



figs15 <- grid.arrange(figs15.1, figs15.2, figs15.3, figs15.4, figs15.5, figs15.6, figs15.7, figs15.8,ncol = 2)
ggsave("fig5.png",fig5,dpi = 600, width = 12, height = 18,device = "png")


figs16.1<-ggplot(df_country, aes(x = group4, y = mean_first_work_avg_publications_afterwork, fill = group4)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_first_work_avg_publications_afterwork - se_first_work_avg_publications_afterwork, ymax = mean_first_work_avg_publications_afterwork + se_first_work_avg_publications_afterwork), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"), 
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 5)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_first_work_avg_jif_afterwork, 2)), vjust = -1.5, size = 4, fontface = "bold")+facet_wrap(~country_w,ncol=5)

figs16.2<-ggplot(df_country, aes(x = group4, y = mean_first_work_avg_jif_afterwork, fill = group4)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_first_work_avg_jif_afterwork - se_first_work_avg_jif_afterwork, ymax = mean_first_work_avg_jif_afterwork + se_first_work_avg_jif_afterwork), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"), 
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 20)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_first_work_avg_jif_afterwork, 2)), vjust = -1.5, size = 4, fontface = "bold")+facet_wrap(~country_w,ncol=5)

figs16<-grid.arrange(figs16.1,figs16.2)

figs17.1<-ggplot(df_subject, aes(x = group4, y = mean_first_work_avg_publications_afterwork, fill = group4)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_first_work_avg_publications_afterwork - se_first_work_avg_publications_afterwork, ymax = mean_first_work_avg_publications_afterwork + se_first_work_avg_publications_afterwork), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 4)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_first_work_avg_jif_afterwork, 2)), vjust = -1.5, size = 4, fontface = "bold")+facet_wrap(~subject,ncol=4)

figs17.2<-ggplot(df_subject, aes(x = group4, y = mean_first_work_avg_jif_afterwork, fill = group4)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_first_work_avg_jif_afterwork - se_first_work_avg_jif_afterwork, ymax = mean_first_work_avg_jif_afterwork + se_first_work_avg_jif_afterwork), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 18)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_first_work_avg_jif_afterwork, 2)), vjust = -1.5, size = 4, fontface = "bold")+facet_wrap(~subject,ncol=4)

figs17<-grid.arrange(figs17.1,figs17.2)
ggsave("figs17.png",figs17,dpi = 600, width = 10, height = 8,device = "png")

figs18.1<-ggplot(df_rank, aes(x = group4, y = mean_first_work_avg_publications_afterwork, fill = group4)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_first_work_avg_publications_afterwork - se_first_work_avg_publications_afterwork, ymax = mean_first_work_avg_publications_afterwork + se_first_work_avg_publications_afterwork), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average Pub",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 4)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_first_work_avg_jif_afterwork, 2)), vjust = -1.5, size = 4, fontface = "bold")+facet_wrap(~ranking_category,ncol=4)

figs18.2<-ggplot(df_rank, aes(x = group4, y = mean_first_work_avg_jif_afterwork, fill = group4)) + 
  geom_bar(stat = "identity", position = "dodge", width = 0.7) + 
  geom_errorbar(aes(ymin = mean_first_work_avg_jif_afterwork - se_first_work_avg_jif_afterwork, ymax = mean_first_work_avg_jif_afterwork + se_first_work_avg_jif_afterwork), width = 0.2, position = position_dodge(0.7)) + 
  scale_fill_manual(values = color_scheme) + 
  labs(y = "Average JIF",fill='') +  
  theme_test() + 
  theme(
    text = element_text(family = "Times New Roman", size = 14), 
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 14, face = "bold"), 
    axis.title.x = element_blank(), 
    axis.title.y = element_text(size = 14, face = "bold"), 
    legend.position = "none", 
    plot.title = element_blank(), 
    plot.tag = element_text(size = 14, family = "Times New Roman", face = "bold"),  
    plot.tag.position = c(0.05, 0.95), 
    strip.text = element_text(size = 14, face = "bold"),
    legend.text = element_text(family = "Times New Roman", size = 14,face = "bold"),  
    legend.title = element_text(family = "Times New Roman", size = 14)
  ) + 
  coord_cartesian(ylim = c(0, 18)) +scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+  
  geom_text(aes(label = round(mean_first_work_avg_jif_afterwork, 2)), vjust = -1.5, size = 4, fontface = "bold")+facet_wrap(~ranking_category,ncol=4)

figs18<-grid.arrange(figs18.1,figs18.2)
ggsave("figs17.png",figs17,dpi = 600, width = 10, height = 8,device = "png")